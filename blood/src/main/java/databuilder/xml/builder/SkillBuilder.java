package databuilder.xml.builder;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.TreeMap;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import databuilder.MainBuilder;
import databuilder.utils.L2String;
import databuilder.utils.XmlPretty;

public class SkillBuilder {
	private HashMap<String, Element> _rootHolder = new HashMap<String, Element>();
	private HashMap<Integer, Element> _l2sHolder = new HashMap<Integer, Element>();
	private TreeMap<Integer, L2SkillInfo> _skillHolder = new TreeMap<Integer, L2SkillInfo>();
	
	
	public class L2SkillInfo{
		int _id;
		int _levels = 0;
		int _lastLevel = 0;
		
		TreeMap<Integer, HashMap<String, String>> _levelHolder = new TreeMap<Integer, HashMap<String, String>>();
		TreeMap<Integer, ArrayList<HashMap<String, String>>> _enchantHolder = new TreeMap<Integer, ArrayList<HashMap<String, String>>>(); 
		HashMap<String, String> _baseLevel;
		Element _element = null;
		
		String[] _keywords = {
				"name", "level", "mp_consume", "description", "icon_name", "hp_consume", 
				"cast_range", "hit_time", "cool_time", "reuse_delay", "is_magic", "oper_type",
				"element_guess", "cast_style_guess", "skill_spec_type_guess", "base_elemental_skill_id", "desc_add1", "desc_add2"
				};
		
		String[] _compare_keywords = {
				"name", "level", "mp_consume", "description", "icon_name", "hp_consume", 
				"cast_range", "hit_time", "cool_time", "reuse_delay", "is_magic", "oper_type",
				"element_guess", "cast_style_guess", "skill_spec_type_guess", "base_elemental_skill_id", "desc_add1", "desc_add2"
				};
		
		public L2SkillInfo(ResultSet rset){
			try{
				_id = rset.getInt("id");	
				addLevel(rset);
				_skillHolder.put(_id, this);
			}catch (SQLException e){
				System.out.println(e);
			}
		}
		
		public void addLevel(ResultSet rset){
			try{
				HashMap<String, String> levelInfo = new HashMap<String, String>();
				for(String keyword: _keywords){
					levelInfo.put(keyword, rset.getString(keyword));
				}
				
				int level = rset.getInt("level");
				
//				addSkillName(_id, level, rset.getString("name"));
				
				if(level == 1 || _baseLevel == null)
					_baseLevel = levelInfo;
				
				if(!rset.getBoolean("is_enchant") || level < 100)
				{
					_lastLevel = Math.max(_lastLevel, level);
					_levelHolder.put(level, levelInfo);
				}
				else
				{
					int enchantRouteId = (int) Math.floor(level/100);
					ArrayList<HashMap<String, String>> enchantRoute = _enchantHolder.get(enchantRouteId);
					if(enchantRoute == null)
					{
						enchantRoute = new ArrayList<HashMap<String, String>>();
						_enchantHolder.put(enchantRouteId, enchantRoute);
					}
					
					enchantRoute.add(levelInfo);
				}
			}catch (SQLException e){
				System.out.println(e);
			}
		}
		
		public Element getElement()
		{
			if(_element == null)
				writeComment();
			
			if(_element == null){
				_element = _l2sHolder.get(_id);
				if(_element != null)
					getRoot(_id).add(_element.detach());
			}
			
			if(_element == null)
			{
//				System.out.println("Missing:"+_id);
				getRoot(_id).addComment("Generated by blood");
				_element = getRoot(_id).addElement("skill");
				_element.addAttribute("id", Integer.toString(_id));
				_element.addAttribute("levels", Integer.toString(_levelHolder.size()));
				
				_element.addElement("set")
				.addAttribute("name", "icon")
				.addAttribute("value", _baseLevel.get("icon_name"));
				
//				_element.addElement("set")
//				.addAttribute("name", "reuseDelay")
//				.addAttribute("value", _baseLevel.get("reuse_delay"));
//				
//				_element.addElement("set")
//				.addAttribute("name", "coolTime")
//				.addAttribute("value", _baseLevel.get("cool_time"));
//				
//				_element.addElement("set")
//				.addAttribute("name", "hitTime")
//				.addAttribute("value", _baseLevel.get("hit_time"));
				
				_element.addElement("set")
				.addAttribute("name", "target")
				.addAttribute("value", "TARGET_NONE");
				
				_element.addElement("set")
				.addAttribute("name", "skillType")
				.addAttribute("value", "NOTDONE");
				
				_element.addElement("set")
				.addAttribute("name", "operateType")
				.addAttribute("value", "OP_ACTIVE");
			}
			_element.addAttribute("name", _baseLevel.get("name"));
			return _element;
		}
		
		public void writeComment(){
			StringBuilder sb = new StringBuilder();
			
			HashMap<String, String> lastLevel = _levelHolder.get(_lastLevel);
			
			if(lastLevel == null)
			{
				System.out.println(_id + " - error: "+_levelHolder.size());
				return;
			}
			
			if(_baseLevel == null)
			{
				System.out.println(_id + " - base lvl missing error: "+_levelHolder.size());
				_baseLevel = lastLevel;
				return;
			}
			
			sb.append(String.format("\n\t\t%s - %s\n", _baseLevel.get("name"), _baseLevel.get("description")));
			
			if(_levelHolder.size() > 1)
			{
				
				for(Map.Entry<Integer, HashMap<String, String>> entry: _levelHolder.entrySet())
				{
					HashMap<String, String> map = entry.getValue();
					
					if(map == null)
						continue;
					
					HashSet<String> changedKeyword = new HashSet<String>(); 
					for(String keyword: _keywords){
						if(keyword.equalsIgnoreCase("level"))
							continue;
						if((map.equals(_baseLevel) && !lastLevel.get(keyword).equalsIgnoreCase(map.get(keyword))) 
								|| !_baseLevel.get(keyword).equalsIgnoreCase(map.get(keyword)))
							changedKeyword.add(keyword);
					}
					
					if(changedKeyword.size() <= 0)
						continue;
					
					sb.append(String.format("\n\t\tLvL.%s", map.get("level")));
					
					for(String keyword: changedKeyword){
						if(keyword.equalsIgnoreCase("description") && !map.equals(_baseLevel))
							sb.append(String.format("\t%s: %s", keyword, L2String.diffDesc(_baseLevel.get(keyword), map.get(keyword))));
						else if(keyword.equalsIgnoreCase("description"))
							sb.append(String.format("\t%s: %s", keyword, L2String.diffDesc(lastLevel.get(keyword), map.get(keyword))));
						else
							sb.append(String.format("\t%s: %s", keyword, map.get(keyword)));
					}
				}
			}
			
			for(Map.Entry<Integer, ArrayList<HashMap<String, String>>> entry2: _enchantHolder.entrySet())
			{
				sb.append(String.format("\n\n\t\tEnchant Route: %s - ", Integer.toString(entry2.getKey())));
				ArrayList<HashMap<String, String>> enchantRoute = entry2.getValue();
				
				HashMap<String, String> baseMap = enchantRoute.get(0);
				HashMap<String, String> secondMap = enchantRoute.get(enchantRoute.size()-1);
				
				sb.append(String.format("\t%s\n", baseMap.get("description")));
				
				for(HashMap<String, String> enchantMap: enchantRoute){
					HashSet<String> changedKeyword = new HashSet<String>(); 
					for(String keyword: _keywords){
						if(keyword.equalsIgnoreCase("level") 
								|| keyword.equalsIgnoreCase("desc_add1")
								|| keyword.equalsIgnoreCase("desc_add2"))
							continue;
						if((enchantMap.equals(baseMap) && !baseMap.get(keyword).equalsIgnoreCase(secondMap.get(keyword))) || !baseMap.get(keyword).equalsIgnoreCase(enchantMap.get(keyword)))
							changedKeyword.add(keyword);
					}
					
					sb.append(String.format("\n\t\tLvL.%s %s - %s", enchantMap.get("level"), enchantMap.get("desc_add1"), enchantMap.get("desc_add2")));
					
					
					if(changedKeyword.size() <= 0)
						continue;
					
					for(String keyword: changedKeyword){
						if(keyword.equalsIgnoreCase("description") && !enchantMap.equals(baseMap))
							sb.append(String.format("\t%s: %s", keyword, L2String.diffDesc(baseMap.get(keyword), enchantMap.get(keyword))));
						else if(keyword.equalsIgnoreCase("description"))
							sb.append(String.format("\t%s: %s", keyword, L2String.diffDesc(enchantRoute.get(1).get(keyword), enchantMap.get(keyword))));
						else
							sb.append(String.format("\t%s: %s", keyword, enchantMap.get(keyword)));
					}
				}
			}
			
			sb.append(String.format("\n\t"));
			
			for(String keyword: _keywords){
				sb.append(String.format("\n\t\t%s: %s", keyword, _baseLevel.get(keyword)));
			}
			
			if(sb.length() > 0){
				sb.append(String.format("\n\t"));
				getRoot(_id).addComment(sb.toString());
			}
		}
		
	}
	
	private static final SkillBuilder _instance = new SkillBuilder();

	public SkillBuilder(){
		dbLoad();
	}
	
	public static SkillBuilder getInstance()
	{
		return _instance;
	}
	
	public void addElement(int item_id, Element e){
		_l2sHolder.put(item_id, e);
	}
	
	public Element getRoot(int id){
		int min_id = id - id%100;
		int max_id = min_id + 99;
		return getRoot(String.format("%05d-%05d", min_id, max_id));
	}
	
	public Element getRoot(String file){
		
		Element resultElement = _rootHolder.get(file);
		
		if(resultElement == null)
		{
			Document document = DocumentHelper.createDocument();
			resultElement = document.addElement("list");
			_rootHolder.put(file, resultElement);
		}
		
		return resultElement;
	}
	
	public L2SkillInfo getSkill(int id){
		return _skillHolder.get(id);
	}
	
	public void dbLoad(){
		try {
			PreparedStatement statement = MainBuilder.connection().prepareStatement("SELECT * FROM L2SkillName ORDER BY id ASC, level ASC");
			ResultSet rset = statement.executeQuery();
			while(rset.next()){
				int id = rset.getInt("id");
				L2SkillInfo skillinfo = _skillHolder.get(id);
				if(skillinfo == null)
					skillinfo = new L2SkillInfo(rset);
				else
					skillinfo.addLevel(rset);
				 
			}
		}catch (SQLException e) {
			e.printStackTrace();
		};
	}
	
	public void store(){
		for(Map.Entry<String, Element> entry: _rootHolder.entrySet())
			XmlPretty.writeToFile(entry.getKey(), entry.getValue().asXML(), null, "data/blood_skills/");
	}
	
	public void build()
	{
		int count = 0;
		for(Map.Entry<Integer, L2SkillInfo> entry: _skillHolder.entrySet())
		{
			entry.getValue().getElement();
			count++;
			if(count%100 == 0){
				System.out.println("processed item: "+count);
			}
		}
//		buildFated();
	}
	
	public void buildAndStore(){
		build();
		store();
	}
}
