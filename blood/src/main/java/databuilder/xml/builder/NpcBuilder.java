package databuilder.xml.builder;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import l2s.gameserver.model.items.ItemInfo;
import l2s.gameserver.stats.conditions.Condition;
import l2s.gameserver.stats.conditions.ConditionLogicAnd;
import l2s.gameserver.stats.conditions.ConditionPlayerMaxLevel;
import l2s.gameserver.stats.conditions.ConditionPlayerMinLevel;
import l2s.gameserver.templates.item.Bodypart;
import l2s.gameserver.templates.item.ItemGrade;
import l2s.gameserver.templates.item.ItemTemplate;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import apple.laf.JRSUIUtils.Tree;
import databuilder.MainBuilder;
import databuilder.MainBuilder.CustomComparator;
import databuilder.utils.L2String;
import databuilder.utils.XmlPretty;
import databuilder.xml.holder.ItemHolder;

public class NpcBuilder {
	private HashMap<String, Element> _rootHolder = new HashMap<String, Element>();
	private HashMap<Integer, Element> _l2sHolder = new HashMap<Integer, Element>();
	private HashMap<Integer, Element> _gaiHolder = new HashMap<Integer, Element>();
	private TreeMap<Integer, L2NpcInfo> _npcHolder = new TreeMap<Integer, L2NpcInfo>();
	
	public class L2NpcInfo{
		int _id;
		String _name, _title;
		float _collision_height, _collision_radius;
		
		Element _element = null;
		
		public L2NpcInfo(ResultSet rset){
			try{
				_id = rset.getInt("id");	
				_name = rset.getString("name");
				_title = rset.getString("title");
				_collision_height = rset.getFloat("collision_height");	
				_collision_radius = rset.getFloat("collision_radius");	
				_npcHolder.put(_id, this);
			}catch (SQLException e){
				System.out.println(e);
			}
		}
		
		public Element getElement()
		{
			if(_element == null){
				_element = _l2sHolder.get(_id);
				if(_element != null)
					getRoot(_id).add(_element.detach());
			}
			
			if(_element == null)
			{
//				System.out.println("Missing:"+_id);
				getRoot(_id).addComment("Generated by blood");
				_element = getRoot(_id).addElement("skill");
				_element.addAttribute("id", Integer.toString(_id));
				
				_element.addElement("set")
				.addAttribute("name", "collision_height")
				.addAttribute("value", Float.toString(_collision_height));
				
				_element.addElement("set")
				.addAttribute("name", "collision_radius")
				.addAttribute("value", Float.toString(_collision_radius));
			}
			_element.addAttribute("name", _name);
			_element.addAttribute("title", _title);
			return _element;
		}
	}
	
	private static final NpcBuilder _instance = new NpcBuilder();

	public NpcBuilder(){
		dbLoad();
	}
	
	public static NpcBuilder getInstance()
	{
		return _instance;
	}
	
	public void addElement(int item_id, Element e){
		_l2sHolder.put(item_id, e);
	}
	
	public Element getRoot(int id){
		int min_id = id - id%100;
		int max_id = min_id + 99;
		return getRoot(String.format("%05d-%05d", min_id, max_id));
	}
	
	public Element getRoot(String file){
		
		Element resultElement = _rootHolder.get(file);
		
		if(resultElement == null)
		{
			Document document = DocumentHelper.createDocument();
			resultElement = document.addElement("list");
			_rootHolder.put(file, resultElement);
		}
		
		return resultElement;
	}
	
	public L2NpcInfo getSkill(int id){
		return _npcHolder.get(id);
	}
	
	public void dbLoad(){
		try {
			PreparedStatement statement = MainBuilder.connection().prepareStatement("SELECT * FROM L2NpcName");
			ResultSet rset = statement.executeQuery();
			while(rset.next()){
				new L2NpcInfo(rset);
			}
		}catch (SQLException e) {
			e.printStackTrace();
		};
	}
	
	public void store(){
		for(Map.Entry<String, Element> entry: _rootHolder.entrySet())
			XmlPretty.writeToFile(entry.getKey(), entry.getValue().asXML(), "skill.dtd", "data/blood_npc/");
	}
	
	public void build()
	{
		int count = 0;
		for(Map.Entry<Integer, L2NpcInfo> entry: _npcHolder.entrySet())
		{
			entry.getValue().getElement();
			count++;
			if(count%100 == 0){
				System.out.println("processed item: "+count);
			}
		}
//		buildFated();
	}
	
	public void buildAndStore(){
		build();
		store();
	}
}
